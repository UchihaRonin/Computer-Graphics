
#include <stdlib.h>
#include <stdio.h>
#include <OpenGL/gl.h>
#include <GLUT/glut.h>
#include <math.h>

void display();                                     /* Render function */
void clock(int v);                                  /* Clock Timer tick */
void keyboard(unsigned char key, int x, int y);     /* Keboard handler */
void mouse(int button, int state, int x, int y);    /* Mouse handler   */

static int window;         /* Window identifier */
static float time;         /* Current time */
static int wired_only = 0; /* Render wireframe only? */
static int paused = 0;     /* Pause timer ticks */
float fRotateAngle = 0.f;  /* Rotate Angle */

int main(int argc, char * argv[]) {
	glutInit(&argc, argv);                                      /* Initialize GLUT */
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);  /* RGBA, Double-buffered, with depth buffer */
	glutInitWindowSize(500,500);                                /* Initialize the window to be 500x500 at (100,100) */
	glutInitWindowPosition(100,100);
	window = glutCreateWindow("OPPA GANGAM STYLE!");            /* Create a new window */
	glutDisplayFunc(display);                                   /* Register the display, keyboard, and timer functions */
	glutKeyboardFunc(keyboard);
	glutTimerFunc(17,clock,0);                                  /* Tick clock timer every 17msecs */
	glClearColor(0.0,0.2,0.6,0.0);                              /* Set the clear color to blue */
	glMatrixMode(GL_PROJECTION);                                /* Set orthographic view */
	glLoadIdentity();
	glOrtho(-3.0,3.0,-3.0,3.0,-3.0,3.0);
	glMatrixMode(GL_MODELVIEW);
	glEnable(GL_LINE_SMOOTH);                                   /* Enable line antialiasing */
	glEnable(GL_BLEND);                                         /* Enable Blend mode */
	glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
	glLineWidth(2.0);                                           /* Set the line width to 2 for thicker lines */
	glHint (GL_LINE_SMOOTH_HINT, GL_NICEST);                    /* Line Hinting */
    glutMouseFunc(mouse);                                       /* called when received mouse interaction */
	glutMainLoop();                                             /* start the main message-callback loop */
    
	return 0;
}

void clock(int v) {
	if (!paused) {                      /* tick the clock */
		time += 0.2;
	}
    fRotateAngle += 1.f;                /* Re-render */
	glutPostRedisplay();
	glutTimerFunc(17,clock,v);          /* And tick again in 17msecs */
}


void Shape(int var) {
	float sin_a = 0.2 * sin(time - 0.5);
	float sin_b = 0.2 * sin(time - 0.5);
	float sin_c = 0.2 * sin(time + 0.5);
	float sin_d = 0.2 * sin(time + 0.5);
	/* === */
	glBegin(var);
    glVertex3f(-1.5,2.5 + sin_a,0.0);
    glVertex3f(1.5,2.5 + sin_d,0.0);
    glVertex3f(1.5,1.5 + sin_d,0.0);
    glVertex3f(0.5,1.5 + sin_c,0.0);
    glVertex3f(-0.5,1.5 + sin_b,0.0);
    glVertex3f(-1.5,1.5 + sin_a,0.0);
	glEnd();
	/*  |  */
	glBegin(var);
    glVertex3f(-0.5,1.5 + sin_b,0.0);
    glVertex3f(0.5,1.5 + sin_c,0.0);
    glVertex3f(0.5,-1.5 + sin_c,0.0);
    glVertex3f(-0.5,-1.5 + sin_b,0.0);
	glEnd();
	/* === */
	glBegin(var);
    glVertex3f(-1.5,-2.5 + sin_a,0.0);
    glVertex3f(1.5,-2.5 + sin_d,0.0);
    glVertex3f(1.5,-1.5 + sin_d,0.0);
    glVertex3f(0.5,-1.5 + sin_c,0.0);
    glVertex3f(-0.5,-1.5 + sin_b,0.0);
    glVertex3f(-1.5,-1.5 + sin_a,0.0);
	glEnd();
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT);                       /* Clear the color buffer */
	if (!wired_only) {
		glPolygonMode( GL_FRONT_AND_BACK, GL_FILL );    /* Render the filled-in polygons */
		glColor3f(1.0,1.0,0);
		Shape(GL_TRIANGLE_FAN);
		glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );    /* Rendering to get smooth edges */
		glColor3f(1.0,1.0,0);
        Shape(GL_LINE_LOOP);
	} else {
		glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );    /* Render the wireframe */
		glColor3f(1.0,1.0,0);
		Shape(GL_TRIANGLE_FAN);
	}
	glutSwapBuffers();                                  /* Flip the back buffer */
}

void mouse(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)   /* Process mouse control here */
		printf("push left mouse button.\n");
}

void keyboard(unsigned char key, int x, int y) {    /* Process Keyboard control here */
	if (key == 27){                                 /* hit ESC to quit */
		printf("demonstration finished.\n");
		exit(0);
	} else if (key == 'w') {
		wired_only = 1;
	} else if (key == 's') {
		wired_only = 0;
	} else if (key == 'p') {
		paused = !paused;
	}
}
